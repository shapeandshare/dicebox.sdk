[DATASET]
name = dicebox
dicebox_compliant = True
image_width = 60
image_height = 50
categories = 11

[TAXONOMY]
neurons: [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]
layers: [1, 2, 3, 5, 8, 13, 21]
activation: ["softmax", "elu", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"]
optimizer: ["rmsprop", "adam", "sgd", "adagrad", "adadelta", "adamax", "nadam"]

[LONESTAR]
neurons = 987
layers = 3
activation = elu
optimizer = adam

[EVOLUTION]
epochs = 10000
generations = 100
population = 50

[TRAINING]
batch_size = 100
train_batch_size = 1000
test_batch_size = 100
load_best_weights_on_start = True

[DIRECTORY]
dataset_base_directory = /Users/joshburt/Workbench/dicebox.io/datasets
logs_dir = ./logs
weights_dir = ./weights
tmp_dir = ./tmp

[SERVER]
api_access_key = 9b2b6be0-2397-414d-8882-da9d53cd285e
api_version = 0.3.0
listening_host = 0.0.0.0
flask_debug = False
model_weights_filename = weights.best.hdf5

[SENSORY_SERVICE]
rabbitmq_uri = amqps://
sensory_uri = https://
sensory_server = localhost
sensory_port = 443
rabbitmq_exchange = sensory.exchange
rabbitmq_batch_request_routing_key = task_queue
rabbitmq_batch_request_task_queue = sensory.batch.request.task.queue

rabbitmq_username = sensory_service
rabbitmq_password = sensory_service!123
rabbitmq_server = localhost
rabbitmq_port = 5671
rabbitmq_vhost = sensory
shard_size = 5000

[TRAINING_SERVICE]
rabbitmq_uri = amqps://
rabbitmq_port = 5671
rabbitmq_server = localhost
rabbitmq_username = training_service
rabbitmq_password = training_service!123
rabbitmq_vhost = training
rabbitmq_exchange = training.exchange
rabbitmq_batch_request_routing_key = task_queue
rabbitmq_train_request_task_queue = train.request.task.queue

[TRAINING_PROCESSOR_SERVICE]
rabbitmq_uri = amqps://
rabbitmq_port = 5671
rabbitmq_server = localhost
rabbitmq_username = training_processor_service
rabbitmq_password = training_processor_service!123
rabbitmq_vhost = training
rabbitmq_exchange = training.exchange
rabbitmq_batch_request_routing_key = task_queue
rabbitmq_train_request_task_queue = train.request.task.queue

[GLOBAL]
noise = 0.0

[CLIENT]
classification_server = localhost
classification_port = 5000
classification_uri = http://



